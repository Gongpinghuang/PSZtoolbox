% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%            Implemented by Vicent Moles-Cases at GTAC-UPV, 2022         
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function to compute the filters for a PSZ system using some of the  
% available algorithms. 
% -------------------------------- Inputs ---------------------------------
% - algorithm:  Algorithm used for computing the filters.
% - Ig:         Lenght of the filters.
% - mod_delay:  Modelling delay.
% - LSPref:     Index of the reference loudspeaker.
% - beta_rel:   Relative regularization factor.
% - solver:     Solver used for computing the filters.
% - P:          Approximation order for the superfast solver.
% - FB:         Handle of an object of the class gdftFB_Class.
% - mexFlag:    Flag indicating if mex functions are used.
% - h:          RIR between all LSP and control points, -> [Ih x L x M]
% - idx_b:      IDX of the control points in the bright zone, -> [Mb x 1]
% - idx_b:      IDX of the control points in the dark zone, -> [Md x 1]             
% -------------------------------- Outputs --------------------------------
% - g:         Computed filters:
%                *For broadband algorithms -> [Ig x L]. 
%                *For filter bank algorithms -> [Ig_sb x L x K/2].
% - FILT:      Handle of the object used to compute the filters.
% -------------------------------------------------------------------------
function [g,FILT] = computeFilters(algorithm,...
                                   Ig,...
                                   mod_delay,...
                                   LSPref,...
                                   beta_rel,...
                                   solver,...
                                   P,...
                                   FB,...
                                   mexFlag,...
                                   h,...
                                   idx_b,...
                                   idx_d)

        % Compute PSZ filters
        if strcmp(algorithm,'wPM-T')
            [FILT,g,ProcTime] = wPMt_Class(Ig,...
                                           mod_delay,...
                                           LSPref,...
                                           beta_rel,...
                                           solver,...
                                           P,...
                                           mexFlag,...
                                           h,...
                                           idx_b,...
                                           idx_d);
        elseif strcmp(algorithm,'wPM-S')
            [FILT,g,ProcTime] = wPMs_Class(Ig,...
                                           mod_delay,...
                                           LSPref,...
                                           beta_rel,...
                                           solver,...
                                           P,...
                                           FB,...
                                           mexFlag,...
                                           h,...
                                           idx_b,...
                                           idx_d);
        elseif strcmp(algorithm,'wPM-F')
            [FILT,g,ProcTime] = wPMf_Class(Ig,...
                                           mod_delay,...
                                           LSPref,...
                                           beta_rel,...
                                           h,...
                                           idx_b,...
                                           idx_d);
        else
             error('computeFilters: Not supported algorithm');
        end
        % Display processing time
        dispPSZ(['Processing time: ',num2str(ProcTime),' s'],5);
end


